#!/bin/bash
# ACI Dashboard Startup Script

set -e

# Configuration
PROJECT_NAME="ACI Dashboard"
COMPOSE_FILE="docker-compose.yml"
ENVIRONMENT=${1:-development}

echo "üöÄ Starting $PROJECT_NAME in $ENVIRONMENT mode..."

# Check if Docker is running
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Error: Docker is not running. Please start Docker first."
    exit 1
fi

# Create necessary directories
echo "üìÅ Creating directory structure..."
mkdir -p data/postgres data/redis logs/nginx nginx/conf.d nginx/ssl database/init

# Set appropriate permissions for data directories
if [[ "$OSTYPE" != "msys"* ]] && [[ "$OSTYPE" != "win32"* ]]; then
    chmod 755 data/postgres data/redis logs/nginx
fi

# Copy environment file if it doesn't exist
if [ ! -f .env ]; then
    echo "üìù Creating .env file from template..."
    cp .env.example .env
    echo "‚ö†Ô∏è  Please update the .env file with your configuration before proceeding."
fi

# Choose compose file based on environment
if [ "$ENVIRONMENT" = "production" ]; then
    COMPOSE_CMD="docker-compose -f docker-compose.yml -f docker-compose.prod.yml"
    echo "üè≠ Using production configuration"
elif [ "$ENVIRONMENT" = "development" ]; then
    COMPOSE_CMD="docker-compose -f docker-compose.yml -f docker-compose.override.yml"
    echo "üõ†Ô∏è  Using development configuration"
else
    COMPOSE_CMD="docker-compose"
    echo "üìã Using default configuration"
fi

# Build and start services
echo "üèóÔ∏è  Building and starting services..."
$COMPOSE_CMD build --no-cache
$COMPOSE_CMD up -d

# Wait for services to be healthy
echo "‚è≥ Waiting for services to be ready..."
sleep 10

# Check service health
echo "üîç Checking service health..."
$COMPOSE_CMD ps

# Show service URLs
echo ""
echo "‚úÖ $PROJECT_NAME is starting up!"
echo "üìä Services will be available at:"
echo "   üåê Frontend: http://localhost:8082"
echo "   üîå Backend API: http://localhost:8001"
echo "   üåâ Nginx Proxy: http://localhost:8083"
echo "   üóÑÔ∏è  Database: localhost:5433"
echo "   üî¥ Redis: localhost:6379"
echo ""
echo "üîç View logs with: $COMPOSE_CMD logs -f"
echo "‚èπÔ∏è  Stop services with: $COMPOSE_CMD down"
echo "üîÑ Restart services with: $COMPOSE_CMD restart"
echo ""

# Show health check
echo "üè• Performing health checks..."
sleep 5

# Check if services are responding
check_service() {
    local url=$1
    local name=$2
    
    if curl -f -s "$url" > /dev/null 2>&1; then
        echo "‚úÖ $name: Healthy"
    else
        echo "‚ùå $name: Not responding"
    fi
}

check_service "http://localhost:8001/health" "Backend API"
check_service "http://localhost:8082/api/health" "Frontend"
check_service "http://localhost:8083/health" "Nginx Proxy"

echo ""
echo "üéâ Startup complete! Check the logs if any services are not responding."